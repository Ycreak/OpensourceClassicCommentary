<div class="container-fluid playground-height-padding" *ngIf="playground_enabled">
    <!-- First we display all buttons to control the playground -->
    <div class="row">
      <!-- The first row contains the edition/fragment selection -->
      <div class="col-3">
        <ng-container
          *ngTemplateOutlet="select_author; context: { column: this.playground_handler.playground }"></ng-container>
      </div>
      <div class="col-3">
        <ng-container
          *ngTemplateOutlet="select_title; context: { column: this.playground_handler.playground }"></ng-container>
      </div>
      <div class="col-3">
        <ng-container
          *ngTemplateOutlet="select_editor; context: { column: this.playground_handler.playground }"></ng-container>
      </div>

      <div class="col-3">
        <button mat-stroked-button class="button-margin" class="button-margin" [matMenuTriggerFor]="fragment_selection">
          {{ this.playground_handler.playground.name }}
          <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
        </button>
        <mat-menu #fragment_selection="matMenu">
          <ng-container *ngFor="let fragment_name of this.playground_handler.playground.fragment_names">
            <button
              mat-menu-item
              (click)="this.playground_handler.playground.fragment_name = fragment_name"
              (click)="this.playground_handler.add_single_fragment(this.playground_handler.playground, fragment_name)">
              {{ fragment_name }}
            </button>
          </ng-container>
        </mat-menu>
      </div>
    </div>

    <div class="div-padding-sm"></div>

    <div class="row">
      <!-- The second row contains all buttons to control the flow of fragments and notes -->
      <div class="col-3">
        <button mat-stroked-button (click)="this.request_fragments(this.playground_handler.playground)">
          Add selected edition
        </button>
      </div>
      <div class="col-3">
        <button
          mat-stroked-button
          color="accent"
          (click)="
            this.playground_handler.delete_clicked_item_from_playground(this.playground_handler.playground, 'fragment')
          ">
          Delete clicked fragment
        </button>
      </div>
      <div class="col-3">
        <button
          mat-stroked-button
          color="accent"
          (click)="
            this.playground_handler.delete_clicked_item_from_playground(this.playground_handler.playground, 'note')
          ">
          Delete clicked note
        </button>
      </div>
      <div class="col-3">
        <button
          mat-stroked-button
          color="warn"
          (click)="
            this.playground_handler.playground.fragments = []; this.playground_handler.playground.note_array = []
          ">
          Clear playground
        </button>
      </div>
    </div>

    <div class="div-padding-lg"></div>
    <!-- Possibility to add a little note -->
    <div class="row">
      <div mat-dialog-content class="col-6">
        <mat-form-field class="input-form" style="--width: 100%">
          <input matInput placeholder="Add a note" ngDefaultControl [(ngModel)]="note" />
          <button
            type="button"
            mat-icon-button
            matSuffix
            (click)="
              this.playground_handler.playground.note_array = this.utility.push_to_array(
                note,
                this.playground_handler.playground.note_array
              )
            ">
            <mat-icon>{{ "add" }}</mat-icon>
          </button>
          <mat-hint>To organise your edition</mat-hint>
        </mat-form-field>
      </div>
    </div>

    <hr />
    <!-- For loop to print all the notes -->
    <div
      *ngFor="let note of this.playground_handler.playground.note_array"
      class="note zlayer"
      style="--layer: 3"
      (click)="this.playground_handler.playground.clicked_note = note"
      cdkDrag>
      {{ note }}
    </div>
    <!-- For loop to print all the base selected fragments -->
    <!-- Recording the clicked fragment allows us to delete it when pressing the delete button -->
    <!-- Also, keep track whether we are dragging or not. If we drag, we do not want the click event to fire -->
    <div
      *ngFor="let fragment of this.playground_handler.playground.fragments"
      class="playground zlayer"
      style="--layer: 2"
      cdkDrag
      (cdkDragStarted)="this.playground_handler.playground_dragging = true"
      (click)="this.handle_fragment_click(fragment, true)"
      (click)="this.playground_handler.playground.clicked_fragment = fragment">
      <div *ngIf="this.settings.fragments.show_headers">
        <b [style.color]="fragment.colour">Fragment {{ fragment.name }} </b> &nbsp;
        <sup>{{ fragment.author }}, {{ fragment.title }}, {{ fragment.editor }}</sup> &nbsp;
        <i>{{ fragment.status }}</i>
      </div>

      <div *ngFor="let fragment_line of fragment.lines">
        <p
          *ngIf="this.settings.fragments.show_line_names; else no_line_names_playground"
          [innerHTML]="fragment_line.line_number + ': ' + fragment_line.text | safeHtml"></p>
        <ng-template #no_line_names_playground>
          <!--safeHtml to allow whitespaces made by spans-->
          <p [innerHTML]="fragment_line.text | safeHtml"></p>
        </ng-template>
      </div>
    </div>
  </div>


<!-- Template for the select author mat-option field -->
<ng-template #select_author let-column="column" let-hint="hint">
  <button mat-stroked-button class="button-margin" class="button-margin" [matMenuTriggerFor]="author_selection">
    <div>
      <span style="vertical-align: middle">{{ column.author }}</span>
      <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
    </div>
  </button>
  <mat-menu #author_selection="matMenu">
    <ng-container *ngFor="let author of column.retrieved_authors">
      <button
        mat-menu-item
        (click)="column.author = author"
        (click)="this.api.request_titles2(column)"
        (click)="column.title = 'Title'"
        (click)="column.retrieved_titles = []"
        (click)="column.editor = 'Editor'"
        (click)="column.retrieved_editors = []">
        {{ author }}
      </button>
    </ng-container>
  </mat-menu>

  <!-- Deprecated since mat-form-field is so uncooperative now -->
  <!-- <mat-form-field class="selection-form" appearance="outline">
        <mat-label>Author</mat-label>
        <mat-select>
            <mat-option *ngFor="let author of column.retrieved_authors" [value]="author"
                (click)="column.author = author"
                (click)="this.request_titles(column)">
                {{ author }} 
            </mat-option>
        </mat-select>
        <mat-hint>{{hint}}</mat-hint>
    </mat-form-field>  -->
</ng-template>

<!-- Template for the select text title mat-option field -->
<ng-template #select_title let-column="column" let-hint="hint">
  <button mat-stroked-button class="button-margin" class="button-margin" [matMenuTriggerFor]="title_selection">
    <div>
      <span style="vertical-align: middle">{{ column.title }}</span>
      <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
    </div>
  </button>
  <mat-menu #title_selection="matMenu">
    <ng-container *ngFor="let title of column.retrieved_titles">
      <button
        mat-menu-item
        (click)="column.title = title"
        (click)="this.api.request_editors2(column)"
        (click)="column.editor = 'Editor'"
        (click)="column.retrieved_editors = []">
        {{ title }}
      </button>
    </ng-container>
  </mat-menu>

  <!-- Deprecated since mat-form-field is so uncooperative now -->
  <!-- <mat-form-field class="selection-form">
        <mat-label>Text</mat-label>
        <mat-select>
            <mat-option *ngFor="let title of column.retrieved_titles" [value]="title" 
                (click)="column.title = title.name"
                (click)="this.request_editors(column)">
                {{ title.name }}                
            </mat-option>
        </mat-select>
        <mat-hint>{{hint}}</mat-hint>
    </mat-form-field> -->
</ng-template>

<!-- Template for the select editor mat-option field -->
<ng-template #select_editor let-column="column" let-hint="hint">
  <button mat-stroked-button class="button-margin" class="button-margin" [matMenuTriggerFor]="editor_selection">
    <div>
      <span style="vertical-align: middle">{{ column.editor }}</span>
      <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
    </div>
  </button>
  <mat-menu #editor_selection="matMenu">
    <ng-container *ngFor="let editor of column.retrieved_editors">
      <button
        mat-menu-item
        (click)="column.editor = editor"
        (click)="this.handle_editor_click(column)">
        {{ editor }}
      </button>
    </ng-container>
  </mat-menu>

  <!-- Deprecated since mat-form-field is so uncooperative now -->
  <!-- <mat-form-field class="selection-form">
        <mat-label>Edition</mat-label>
        <ng-container *ngIf="column.name != 'playground'; else playground_editor_select">
            <mat-select>
                <mat-option 
                *ngFor="let editor of column.retrieved_editors" 
                [value]="editor"
                (click)="column.editor = editor.name"
                (click)="this.request_fragments(column)">
                {{ editor.name }}                     
                </mat-option>
            </mat-select>
        </ng-container>
        <ng-template #playground_editor_select>
          <mat-select>
            <mat-option 
              *ngFor="let editor of column.retrieved_editors" 
              [value]="editor"
              (click)="column.editor = editor.name"
              (click)="this.request_fragment_names(column)">
              {{ editor.name }}                     
            </mat-option>
          </mat-select>
        </ng-template>

        <mat-hint>{{hint}}</mat-hint>
    </mat-form-field> -->
</ng-template>